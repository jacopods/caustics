"""
Created on Tue Jan 18 2022

@author: Victoria Wilczynski

Title: DEPENDENCE OF THE ROTATION NUMBER OF THE
RESTRICTION OF BILLIARD MAPS TO A COMMON CAUSTICS
"""

#import json file
import json

#import math
import math

#import numpy
import numpy as np
 
#can we make the file be a specific name?
with open('test.json') as f:
    seq = json.load(f)
    
a_n = seq["a_n"]
b_n = seq["b_n"]

if len(a_n) < len(b_n):
    n = len(b_n)-len(a_n)
    for i in range(len(a_n), len(a_n)+n):
        a_n.append(0)
elif len(b_n) < len(a_n):
    n = len(a_n)-len(b_n)
    for i in range(len(b_n), len(b_n)+n):
        b_n.append(0)
        
N=len(a_n)

tol = 1e-17 #can change this value if needed

def mod_2pi(x):
    '''
    Returns x mod 2pi

    Parameters
    ----------
    x : number

    Returns
    -------
    x mod 2pi

    '''
    return math.fmod(x, 2*math.pi)

def check_interval(p,q):
    '''
    Modifies p and q to be in correct interval.
    If q<p, add 2pi to q to get correct interval.

    Parameters
    ----------
    p: first angle
    q: second angle

    Returns
    -------
    Modified p,q

    '''
    p_p = mod_2pi(p)
    q_p= q+(p_p-p)
    
    if q_p<p_p: #if q is less than p
        while q_p<p_p: #continue to add 2pi to q until it is greater than p
            q_p = q_p+2*math.pi
    
    return p_p,q_p
    
def check_equality(a,b):
    '''
    check if absolute difference of two floats is less than tol
    (checking for equality between two floats)

    Parameters
    ----------
    a : float
    b : float

    Returns
    -------
    True/False

    '''
    if abs(a-b)<=tol:
        return True
    return False

def check_eq_mod_pi(a,b):
    '''
    check if abs difference of two floats mod pi is less than tol

    Parameters
    ----------
    a : float
    b : float

    Returns
    -------
    True/False

    '''
    val = math.fmod(abs(a-b), math.pi)
    
    if val <= tol:
        return True
    return False


#compute distance between two points
def distance(a,b):
    '''
    Compute the distance between a=(x_1,y_1) and b=(x_2,y_2)

    Parameters
    ----------
    a : Tuple/list, coordinates
    b : Tuple/list, coordinates

    Returns
    -------
    Float, the distance between the two points

    '''
    x1 = a[0]
    x2 = b[0]
    y1 = a[1]
    y2 = b[1]
    
    d = ((x2-x1)**2 + (y2-y1)**2)**(1/2)
    
    return d

#compute trig polynomial
def trig_poly(theta):
    '''
    Returns the trig polynomial value from the sequences a_n, b_n
    and a given theta

    Parameters
    ----------
    theta: radius of curvature of curve at point identified by theta

    Returns
    -------
    A numerical value p(theta)

    '''
    #a_n and b_n are global variables
    #a_0 is related to perimeter of curve 
    a_0 = a_n[0]
    
    #summation goes from k=2 to M to enforce tangent angle param
    k = 2
    
    summation = 0
    
    #computing summation
    for i in range(k,N):
        summation += (a_n[i]*math.cos(i*theta))+(b_n[i]*math.sin(i*theta))

    p_t = a_0 + summation
    
    return p_t

#check that p(theta) is strongly convex
def convex_check():
    '''
    Checks for strongly convex domain, p(theta)>0 for all theta.
    Returns True if strongly convex, returns False if not.

    Returns
    -------
    True/False

    '''
    #set epsilon
    epsilon = 1/2
    
    #set up bound M
    M = 0
    
    #finding bound M
    for i in range(1,N):
        M += i*(abs(a_n[i])+abs(b_n[i]))
    
    values = np.arange(0, ((2*math.pi)/epsilon), epsilon)
    
    #evaluate rho(n*epsilon)>M*epsilon for all n in range
    while epsilon > tol:
        test = []
        for n in values:
            if trig_poly(n*epsilon) > M*epsilon:
                test.append(True)
            else:
                test.append(False)
        if all(test):
            return True
        epsilon = epsilon/2
        
    return False

#x(theta)
def x_theta(theta):
    '''
    Returns x coordinate given theta.

    Parameters
    ----------
    theta : float, angle given

    Returns
    -------
    x(theta)

    '''
    #derived this formula in write-up
    a_0 = a_n[0]
    
    k = 2
    
    summation = 0
    
    for i in range(k,N):
        #first part of summation with * a_k
        a1 = (1/(i+1))*math.sin(i*theta + theta)
        a2 = (1/(1-i))*math.sin(theta - i*theta)
        a = a_n[i]*(a1+a2)
        
        #second part of summation with * b_k
        b1 = (-1/(i+1))*math.cos(i*theta + theta)
        b2 = (1/(1-i))*math.cos(i*theta - theta)
        b3 = (-1/(i+1))-(1/(1-k))
        b = b_n[i]*((b1-b2)-b3)
        
        #adding to total summation
        summation += (a+b)
        
    #getting final x coordinate
    x = (a_0*math.sin(theta))+(1/2)*(summation)
    
    return x

#y(theta)
def y_theta(theta):
    '''
    Returns y coordinate given theta.

    Parameters
    ----------
    theta : float, angle given

    Returns
    -------
    y(theta)

    '''
    #derived this formula in writeup
    a_0 = a_n[0]
    
    k = 2
    
    summation = 0
    
    for i in range(k,N):
        #first part of summation with * a_k
        a1 = (-1/(i+1))*math.cos(i*theta + theta)
        a2 = (1/(1-i))*math.cos(theta - i*theta)
        a3 = (-1/(i+1))-(1/(1-k))
        a = a_n[i]*((a1-a2)-a3)
        
        #second part of summation with * b_k
        b1 = (-1/(i+1))*math.sin(i*theta + theta)
        b2 = (1/(1-i))*math.sin(theta - i*theta)
        b = b_n[i]*((b1+b2))
        
        #adding to total summation
        summation += (a+b)
        
    #getting final x coordinate
    y = (a_0*(-math.cos(theta)))+(1/2)*(summation)
    
    return y

#length(theta, theta')
def length(p,q):
    '''
    Calculates length given the angles p and q.
    Let p=theta, q=theta'
    
    Parameters
    ----------
    p : angle
    q : angle

    Returns
    -------
    length of the arc between p and q

    '''
    #first check and make sure p,q correct interval
    p,q = check_interval(p,q)
    
    a_0 = a_n[0]
    
    k = 2
    
    summation = 0
    
    for i in range(k,N):
        a = a_n[i]*(math.sin(i*q)-math.sin(i*p))
        b = b_n[i]*(-1*math.cos(i*q)+math.cos(i*p))
        summation += (a+b)
        
    l = (a_0*(q-p))+(1/k)*summation
    
    return l

def intersection(L,K):
    '''
    Gives the lines L and K 
    

    Parameters
    ----------
    L : tuple/list, includes x and y coordinate of a point on L,
        and the angle L makes with the horizontal
    K : tuple/list, includes x and y coordinate of a point on K,
        and the angle K makes with the horizontal

    Returns
    -------
    Intersection point a=(x,y)

    '''
    x,y,t = L
    w,z,s = K
    
    if check_eq_mod_pi(t,s): #check if angles are the same
        return None
    #check anti parallel too, t-s is multiple of pi also never meet
    if float.is_integer((t-s)/math.pi):
        return None
    #if points given on both lines are the same
    if check_equality(x,w) and check_equality(y,z): 
        return (x,y)
    
    #parameterize the lines as curves
    
    #L = [x,y]+a[cos(t),sin(t)]
    #K = [w,z]+b[cos(s),sin(s)]
    
    p1 = np.array([x,y])
    p2 = np.array([w,z])
    
    v1 = np.array([math.cos(t), math.sin(t)])
    v2 = np.array([math.cos(s), math.sin(s)])
    
    #solve the system of equations for a and b
    A = np.array([[math.cos(t), -math.cos(s)],[math.sin(t), -math.sin(s)]])
    
    B = np.array([w-x, z-y])
    
    #gives values for a and b, then we can plug one of these into our parameterization
    X = np.linalg.solve(A,B)
    
    intersection_pt = p1+X[0]*v1
    
    #could also do p2+X[1]*v2
    
    return intersection_pt


def string_len(p,q):
    '''
    Returns the string length.

    Parameters
    ----------
    #check if these are the correct inputs
    p : tuple, point and angle with horizontal?
    q : tuple, point and angle with horizontal?

    Returns
    -------
    Float, length of string

    '''
    #check condition
    check_interval(t,t_p)
    
    #need to find point (x,y) given both angles
    x_t = x_theta(t)
    y_t = y_theta(t)
    
    x_t_p = x_theta(t_p)
    y_t_p = y_theta(t_p)
    
    #first we need to find r, the intersection point
    r = intersection([x_t,y_t,t],[x_t_p,y_t_p,t_p])
    
    #getting length of the line connecting pr and rq
    #aka getting distance
    #|pr| and |rq|
    pr = distance((x_t,y_t),r)
    rq = distance(r,(x_t_p,y_t_p))
    
    #Length(q,p)
    l = length(t,t_p+(2*math.pi))
    
    return l+pr+rq


#left for sanity check
def string_curve_ineq(p,q):
    '''
    Check that l>|Gamma| (string length is greater than length of curve)

    Parameters
    ----------
    p: angle
    q: angle

    Returns
    -------
    True if l>|Gamma|, False otherwise

    '''
    #find length of string given p and q
    string = string_len(p, q)

    
    #length of curve is given by length from p to p' + length from p' to p
    p1 = length(p, p+math.pi)
    p2 = length(p+math.pi, p)
    
    gamma = p1+p2
    
    return string > gamma
    
    
#bisection method to find q
def find_q(theta,l):
    '''
    Using bisection method, we find q such that F_ell(p)=q.
    
    Parameters
    ----------
    theta: the angle of the tangent to the point p

    Returns
    -------
    float

    '''
    #choose q between p and antipodal point
    #antipodal point is theta+pi
    #compute lenght of string tangent to p and q
    #if len>l then in first half of arc
    #if len<l then in second half of arc
    #iterate until sufficiently small interval 
    theta_p = theta+math.pi
    
    interval = [theta, theta_p]
    
    q = (theta+theta_p)/2
    
    #once interval is small enough, we stop the loop
    while interval[1]-interval[0] > tol:
       a = interval[0]
       b = interval[1]
       q = (a+b)/2
       
       s_l = string_len(theta, q)
       
       if s_l > l:
          #first half of arc
          interval = [a,q]
       elif s_l < l:
           #second half of arc
           interval = [q,b]
       else:
           return q
         
    return interval[0]
    
#finding rotation number
def rotations(l):
    '''
    Calculating rotation number for a given domain.
    
    Parameters
    ----------
    l: float, string length

    Returns
    -------
    float, the rotation number (should be in between 0 and 1/2)

    '''
    #M is number of times we want to loop
    M = int(10e6)
    #set theta = 0
    theta = 0
    #set number of times around domain = 0
    p = 0
    
    #start looping M times
    for i in range(M):
        #map theta to F_ell(theta)
        theta = find_q(theta, l)
        
        #if theta > 2pi, we made it around the domain
        if theta > 2*math.pi:
            #increase p by 1
            p += 1
            #fix theta be in 0 to 2pi to go around domain again
            theta = mod_2pi(theta)
    #return rotation number
    return p/M        
    
#plotting rotation numbers
def plot_rotation():
    '''
    Plots the rotation number as l increases.

    Returns
    -------
    None, but gives us a plot
    '''    
    epsilon = 10e-3
    vals = []
    gamma = domain_len()
    end = 1000*gamma
    
    range_loop = np.arange(gamma, end, epsilon).tolist()
    
    for i in range_loop:
        vals.append(rotations(i))
        
    plt.plot(range_loop, vals)
    plt.title("Rotation Number Given l")
    plt.xlabel("l (Starting at |Gamma|)")
    plt.ylabel("Rotation Number")
        
